@model IEnumerable<ProgPoe.Models.Claim>
@{
    ViewBag.Title = "Track Claim Status";

    // Helper methods to determine CSS classes based on status
    string GetStatusClass(string status)
    {
        return status switch
        {
            "Approved by Manager" => "approved",
            "Rejected by Coordinator" => "rejected",
            "Rejected by Manager" => "rejected",
            "Pending" => "pending",
            _ => "unknown" // Default class for any unexpected status
        };
    }

    string GetRowClass(string status)
    {
        return status switch
        {
            "Approved by Manager" => "text-success",
            "Rejected by Coordinator" => "text-danger",
            "Rejected by Manager" => "text-danger",
            "Pending" => "text-warning",
            _ => "text-muted" // Default text class
        };
    }
}

<style>
    body {
        background-color: #2a2a2a; /* Light black background for the entire page */
        color: #f4f4f9; /* Light text color for better contrast */
        font-family: 'Arial', sans-serif; /* Consistent font family */
    }

    .container-claims {
        max-width: 700px; /* Max width for the form container */
        margin: 50px auto; /* Center the container */
        padding: 30px; /* Padding inside the container */
        background-color: #3b3b3b; /* Darker background for the form */
        border-radius: 10px; /* Rounded corners */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
    }

    h2 {
        font-size: 2rem; /* Heading font size */
        color: #ffcc00; /* Highlight color for the heading */
        text-align: center; /* Center align heading */
        margin-bottom: 20px; /* Space below the heading */
    }

    .status-summary {
        display: flex; /* Flexbox for layout */
        justify-content: space-between; /* Space items evenly */
        margin-bottom: 20px; /* Space below the summary */
        padding: 15px; /* Padding for the summary */
        background-color: #4b4b4b; /* Darker background for the summary */
        border-radius: 8px; /* Rounded corners for the summary */
    }

    .status-item {
        flex: 1; /* Equal space for each item */
        color: #f4f4f9; /* Light text color */
        font-weight: bold; /* Bold text */
    }

    .filter-section {
        margin-bottom: 20px; /* Space below the filter */
        text-align: center; /* Center align filter */
    }

    .status-filter {
        padding: 10px; /* Padding for dropdown */
        border-radius: 5px; /* Rounded corners */
        border: 1px solid #555; /* Dark border */
        background-color: #4b4b4b; /* Dark background for dropdown */
        color: #f4f4f9; /* Light text color for dropdown */
    }

    .table {
        width: 100%; /* Full width for table */
        margin-top: 20px; /* Space above the table */
        border-collapse: collapse; /* Collapse borders */
    }

        .table th, .table td {
            padding: 15px; /* Padding for table cells */
            text-align: left; /* Left align text */
            border-bottom: 1px solid #555; /* Border for rows */
            color: #f4f4f9; /* Light text color for table */
        }

        .table th {
            background-color: #4b4b4b; /* Darker background for table headers */
            color: #ffcc00; /* Highlight color for table headers */
        }

    .btn-submit {
        display: inline-block; /* Inline block for button */
        padding: 10px 20px; /* Padding for button */
        background-color: #007bff; /* Button background color */
        color: #fff; /* White text color for button */
        border: none; /* Remove default border */
        border-radius: 5px; /* Rounded corners for button */
        text-decoration: none; /* Remove underline */
        transition: background-color 0.3s; /* Smooth transition for hover */
        margin-top: 20px; /* Space above the button */
    }

        .btn-submit:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
</style>

<div class="container-claims">
    <h2>Track Your Claim Status</h2>

    <!-- Status Summary Section -->
    <div class="status-summary">
        <div class="status-item approved">
            Approved Claims: <span id="approved-count">@Model.Count(c => c.Status == "Approved by Manager")</span>
        </div>
        <div class="status-item rejected">
            Rejected Claims: <span id="rejected-count">@Model.Count(c => c.Status == "Rejected by Coordinator" || c.Status == "Rejected by Manager")</span>
        </div>
        <div class="status-item pending">
            Pending Claims: <span id="pending-count">@Model.Count(c => c.Status == "Pending")</span>
        </div>
    </div>

    <div class="filter-section">
        <label for="status-filter">Filter by Status:</label>
        <select id="status-filter" class="status-filter" onchange="filterClaims()">
            <option value="All">All</option>
            <option value="Approved">Approved</option>
            <option value="Rejected">Rejected</option>
            <option value="Pending">Pending</option>
        </select>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Claim ID</th>
                <th>Submission Date</th>
                <th>Status</th>
                <th>Remarks</th>
            </tr>
        </thead>
        <tbody id="claims-table-body">
            @foreach (var claim in Model)
            {
                <tr class="@GetStatusClass(claim.Status)" data-status="@claim.Status">
                    <td>@claim.ClaimId</td>
                    <td>@claim.DateSubmitted.ToString("yyyy/MM/dd")</td>
                    <td class="@GetRowClass(claim.Status)">@claim.Status</td>
                    <td>@claim.Notes</td>
                </tr>
            }
        </tbody>
    </table>

    <a href="/Lecturer/Dashboard" class="btn-submit"><i class="fa-solid fa-house"></i> Back to Dashboard</a>
</div>

<script>
    function filterClaims() {
        const filterValue = document.getElementById("status-filter").value.toLowerCase();
        const claimsTable = document.getElementById("claims-table-body");
        const rows = claimsTable.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const status = row.getAttribute("data-status").toLowerCase();

            if (filterValue === "all" || status === filterValue) {
                row.style.display = ""; // Show the row
            } else {
                row.style.display = "none"; // Hide the row
            }
        }
    }
</script>
